// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// deltri_cpp
Rcpp::List deltri_cpp(std::vector<double> coords);
RcppExport SEXP _ppmData_deltri_cpp(SEXP coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type coords(coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(deltri_cpp(coords));
    return rcpp_result_gen;
END_RCPP
}
// dirtess_poly_area
double dirtess_poly_area(NumericVector x, NumericVector y);
RcppExport SEXP _ppmData_dirtess_poly_area(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dirtess_poly_area(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dirtess_cpp
List dirtess_cpp(std::vector<double> coords);
RcppExport SEXP _ppmData_dirtess_cpp(SEXP coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type coords(coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(dirtess_cpp(coords));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ppmData_deltri_cpp", (DL_FUNC) &_ppmData_deltri_cpp, 1},
    {"_ppmData_dirtess_poly_area", (DL_FUNC) &_ppmData_dirtess_poly_area, 2},
    {"_ppmData_dirtess_cpp", (DL_FUNC) &_ppmData_dirtess_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ppmData(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
